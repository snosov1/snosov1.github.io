<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Логово старого хакера</title>
    <link>http://snosov1.github.io/ru/</link>
    <description>Recent content on Логово старого хакера</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ru</language>
    <lastBuildDate>Mon, 14 Jan 2019 14:38:37 +0300</lastBuildDate>
    
        <atom:link href="http://snosov1.github.io/ru/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Хорошие и плохие программы</title>
      <link>http://snosov1.github.io/ru/post/good-software/</link>
      <pubDate>Mon, 14 Jan 2019 14:38:37 +0300</pubDate>
      
      <guid>http://snosov1.github.io/ru/post/good-software/</guid>
      
        <description>&lt;p&gt;Всё что угодно можно рассматривать с самых разных точек зрения. Молоток может
хорошо лежать в руке, либо быть неудобным и натирать мозоли. Может быть красивым
или неприглядным. Может быть долговечным или ненадёжным и т.д. При этом один и
тот же объект для кого-то может быть красив, а для кого-то нет, кому-то удобен,
а кому-то нет, у кого-то он работает годами, а кто-то вынужден его ремонтировать
раз в месяц.&lt;/p&gt;

&lt;p&gt;Плюс к этому, разные люди ценят в вещах разное. Коллекционер в первую очередь
интересуется возрастом, историей и внешним видом изделия. Плотнику, работающему
инструментом каждый день, наоборот, как правило, будет не так важно, как он
выглядит -- ему важнее удобство и надёжность.&lt;/p&gt;

&lt;p&gt;Тем не менее, не смотря на эти сложности и противоречия, как правило, вещи
бывают хорошие и плохие. Можно даже попытаться как-то формально определить, чем
они отличаются -- вроде того, что &#34;Хорошие вещи максимизируют эффект/пользу
важных для определенной категории пользователей факторов так, что противоречащие
им факторы при этом не делают вещь бесполезной.&#34; Но, вообще, формальные
определения таких общих понятий редко бывают полезными. Известный мыслитель и
прагматик современности, Линус Торвальдс, говорит на этот счёт, что у человека
просто должен быть &#34;вкус&#34;, чтобы отделять хорошее от плохого. Понятно, что это
определение менее информативно, но, наверное, одинаково бесполезно с
практической точки зрения.&lt;/p&gt;

&lt;p&gt;Более полезные ответы можно получить, если мы начнём обсуждать более конкретные
вещи. В этот раз я хотел поговорить про компьютерные программы. Какие факторы
при их разработке нужно выпятить вперёд, а какими до определённой степени можно
пренебречь? Рассмотрим на небольшом примере.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;В своё время я написал довольно простую утилитку для генерации содержания для
текстовых файлов, написанных с использованием разметки Org --
&lt;a href=&#34;https://github.com/snosov1/toc-org&#34; title=&#34;toc-org&#34;&gt;toc-org&lt;/a&gt;. Неожиданно для меня самого, она оказалась довольно популярной и в
момент написания статьи насчитывает уже более двухсот тысяч скачиваний (попадая
при этом в 3% самых популярных пакетов на &lt;a href=&#34;https://melpa&#34; title=&#34;melpa.org&#34;&gt;melpa.org&lt;/a&gt;). В наибольшей степени этот
пакет, наверное, обязан успехом сборке &lt;a href=&#34;http://spacemacs.org/&#34; title=&#34;spacemacs&#34;&gt;spacemacs&lt;/a&gt;. После медленного
вскарабкивания до (примерно) 30-50 тысяч скачиваний, количество стремительно
удвоилось именно после того, как &lt;code&gt;toc-org&lt;/code&gt; был включён в &lt;code&gt;spacemacs&lt;/code&gt;. И с тех же
пор оно продолжает уверенными темпами расти.&lt;/p&gt;

&lt;p&gt;Конечно, вклад &lt;code&gt;spacemacs=&#39;а переоценить нельзя, но я льщу себе и тем, что
пакет-таки обладает некоторыми хорошими качествами, которые позволили ему
заработать народную любовь. Для большей наглядности, я хочу сравнить свой
[[https://github.com/snosov1/toc-org][toc-org]] и пакет [[https://github.com/alphapapa/org-make-toc][org-make-toc]] с точки зрения подхода к разработке. =org-make-toc=
написал нормальный увлечённый паренёк, который какое-то время присылал мне
дельные (и не очень) предложения по =toc-org&lt;/code&gt; и с которым мы много на эту тему
спорили в комментариях. Спустя какое-то время, как я понимаю, ему надоело
получать отказы на большинство своих предложений (которые я считал
неправильными) и он решил написать свой пакет -- так, как кажется правильным
ему. Своим взглядом на разницу в наших подходах я и хотел бы поделиться.&lt;/p&gt;
&lt;!-- - Low cognitive load (works as is, notifications, opinionation, visible noise) --&gt;
&lt;!-- - Maximum Usefulness --&gt;
&lt;!-- - Reliability (Backward-compatibility, tests, CI, unnecessary dependencies, code readability) --&gt;

&lt;h1 id=&#34;минимальная-интеллектуальная-нагрузка&#34;&gt;Минимальная интеллектуальная нагрузка&lt;/h1&gt;

&lt;p&gt;В современном мире человек перегружен потоком информации. Где-то я видел цифру,
что через современного обладателя смартфона за день проходит столько же
информации, сколько через крестьянина/пролетария начала 20го века проходило то
ли за месяц, то ли и того больше.&lt;/p&gt;

&lt;p&gt;Думаю, что желающих увеличивать этот поток без очевидной необходимости не
много. Поэтому все утилитарные вещи (а практически все программы являются
утилитарными) должны требовать как можно меньше участия человека. В идеале,
совсем его не требовать.&lt;/p&gt;

&lt;p&gt;Первое, где нас встречают различия в пакетах -- документация по установке. В
=toc-org= первое же, что встречает пользователя после короткого описания - три
строчки, которые нужно просто скопировать в конфигурационный файл, для того,
чтобы &#34;всё заработало&#34;. Кроме того, это практически единственные строчки на
elisp&#39;e во всём файле -- заблудиться просто негде. В &lt;code&gt;org-make-toc&lt;/code&gt; сначала идёт
секция про установку, содержащая бесполезную информацию для тех, кто и так
знает, как устанавливать пакеты, и, в то же время, недостаточную для тех, кто не
знает. Т.е. информационный шум.&lt;/p&gt;

&lt;p&gt;После этого там идёт словесное описание того, как сгенерировать содержание один
раз. Тут у меня два вопроса - почему описание словесное? А, во-вторых, и это
самое главное, зачем нужно описывать, как сгенерировать содержание один раз?
Ведь практически всегда пользователи захотят поддерживать его в актуальном
состоянии. И описывать в первую очередь нужно именно этот случай. Он тоже,
конечно, описан, но существенно ниже, после описания неких &#34;продвинутых&#34;
возможностей. Причём просто скопировать код оттуда недостаточно -- его
непременно надо приклеить к коду из предыдущей секции по установке.&lt;/p&gt;

&lt;p&gt;Второе, где мы видим различия -- это необходимая разметка в файле для того,
чтобы авто-генерация заработала. В случае с &lt;code&gt;toc-org&lt;/code&gt;, пользователю нужно просто
добавить тэг &lt;code&gt;:TOC:&lt;/code&gt; к заголовку и всё (5 символов на той же строчке, что и
заголовок, стандартная разметка для формата &lt;code&gt;org&lt;/code&gt;). В случае c &lt;code&gt;org-make-toc&lt;/code&gt;,
казалось бы, нужно просто добавить свойство (а не тэг). Но &#34;просто добавить
свойство&#34; -- это 3 специальные строчки, одну из которых нельзя будет скрыть:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;:TOC:      this
:END:
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Понятно, что свойства в формате org -- более гибкий способ добавлять
мета-информацию к заголовкам. Но если вам достаточно иметь переменные, которые
принимают всего два значения (true или false) -- тогда вполне можно обойтись
тэгами (занимающими минимум места). Если же вы хотите приклеивать числа или
строки, тогда org предлагает использовать свойства (существенно более громоздкая
конструкция).&lt;/p&gt;

&lt;p&gt;Самая главная мета-информация в нашем случае -- это какую секцию считать
содержанием. Оправдано ли здесь применений свойств (читай, добавление трёх
строчек)?  Категорически нет.&lt;/p&gt;

&lt;p&gt;Справедливости ради нужно отметить, что для описываемого функционала можно
придумать, где применить числовые свойства. Более того, два свойства -- числовое
и строчное -- присутствуют и в моём пакете с самого первого дня. Но вместо
использования свойств, я просто дописываю мета-информацию к тому же тэгу --
например, &lt;code&gt;:TOC_2_org:&lt;/code&gt;. Да, это не соответствует соглашениям и принципам родной
разметки. Да, это выглядит, как изобретение велосипеда на ровном месте. Но
первое и, уж тем более, второе свойство используются довольно редко и нужно ли
заставлять большинство пользователей платить за чьи-то там соглашения без какой
бы-то ощутимой пользы? По-моему, ответ однозначный.&lt;/p&gt;

&lt;p&gt;Можно резонно предположить, что таким образом я, кроме прочего, сужаю себе
манёвр для последующего расширения функциональности. Но дело в том, что пакет в
его текущей (и практически, изначальной) форме решает именно ту задачу, которую
должен решать в полном объёме. Принципиально новая функциональность уже будет
уделом другого пакета, с другими целевыми группами пользователей. К слову,
=org-make-toc= может стать таким пакетом -- нацеленным на хранение сложных
архивов каких-либо документов, в которых нужно хитрым образом настраивать
навигацию. Очевидно, пользователей у такого подхода будет на несколько порядков
меньше, чем &#34;рядовых&#34; пользователей &lt;code&gt;toc-org&lt;/code&gt; (на текущий момент, на 3 порядка).&lt;/p&gt;

&lt;p&gt;Подводя некоторым образом итог, &lt;code&gt;org-make-toc&lt;/code&gt;, на мой взгляд, безответственно
распоряжается вниманием пользователя -- для настройки ему нужно до некоторой
степени разобраться в устройстве пакета, понять, что большинство функций на
витрине ему практически никогда не понадобятся, плюс, в каждом файле ему нужно
занять непропорционально много места для разметки мета-информации. Например,
readme пакета содержит 24 &#34;вспомогательные&#34; строчки разметки из 135-ти,
т.е. почти пятая (!) часть всего файла не несёт содержательной информации.&lt;/p&gt;

&lt;p&gt;Конечно, свою работу всегда хочется выставить на показ, чтобы другие любовались
и одобрительно цокали языками. Однако, если подходить к вопросу профессионально,
всё-таки предел совершенства любой утилитарной вещи -- это когда о её
существовании даже не задумываешься. Профессионалы оценят именно это. И пусть
это будет редко, но по-настоящему.&lt;/p&gt;

&lt;h1 id=&#34;максимальная-полезность-и-стабильность&#34;&gt;Максимальная полезность и стабильность&lt;/h1&gt;

&lt;p&gt;Насколько я понимаю, последней каплей, послужившей поводом для создания
=org-make-toc= был мой отказ включать довольно странную функциональность,
предусматривающую большее количество способов контролировать включаемые
заголовки. &lt;code&gt;toc-org&lt;/code&gt; позволяет игнорировать отдельные заголовки и группы
подзаголовков (оставляя &#34;родительский&#34; заголовок) в довольно лаконичной форме.&lt;/p&gt;

&lt;p&gt;Вот что предлагает =toc-org=:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;если заголовок надо исключить, к нему нужно добавить тэг &lt;code&gt;:noexport:&lt;/code&gt;,&lt;/li&gt;
&lt;li&gt;если заголовок надо оставить, но исключить его подзаголовки, нужно добавить&lt;/li&gt;
  тэг &lt;code&gt;:noexport_1:&lt;/code&gt;, &lt;code&gt;:noexport_2:&lt;/code&gt;, &lt;code&gt;:noexport_3:&lt;/code&gt;, и т.д. в зависимости от
  желаемой глубины исключаемых подзаголовков
&lt;/ul&gt;

&lt;p&gt;Очевидно, что при этом нельзя, например, исключить подзаголовки первого уровня,
но оставить подзаголовки второго уровня. Вот какой дизайн для этого предлагает
автор =org-make-toc=:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  A document may contain multiple tables of contents. Tables of contents can be
  customized by setting the TOC property of headings to these values:

  - all: Include all headings in the file, except ignored headings.
  - children: Include only child headings of this ToC.
  - siblings: Include only sibling headings of this ToC.
  - ignore: Omit a heading from the TOC.
  - ignore-children or 0: Omit a heading’s child headings from the TOC.
  - a number N: Include child headings up to N levels deep in the TOC.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Не уверен, что из текста документации сразу понятно, как этим пользоваться, но,
уверен, что методом проб и ошибок, можно достичь желаемого
результата. (Возвращаясь к вопросу о снижении интеллектуальной нагрузки).&lt;/p&gt;

&lt;p&gt;Так или иначе, вот (насколько мне известно) полный список достоинств, которыми
обладает &lt;code&gt;org-make-toc&lt;/code&gt; и которых нет у =toc-org=:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Уже озвученные возможности создавать несколько (?) содержаний и более детально&lt;/li&gt;
   контролировать, что должно туда попасть, а что нет.
&lt;li&gt;Правильное отображение ссылок, содержащих внутреннюю разметку (например,&lt;/li&gt;
   &#34;жирные&#34; или курсивные слова)
&lt;li&gt;&#34;Качественный&#34; код, использующий современные emacs&#39;овские библиотеки&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Первый пункт мне нечем крыть, кроме того, что я ещё не встречал ни одного
человека, кроме автора &lt;code&gt;org-make-toc&lt;/code&gt;, кому эта функциональность была бы
интересна. А по двум остальным мне есть, что сказать.&lt;/p&gt;

&lt;p&gt;Когда я начинал писать &lt;code&gt;toc-org&lt;/code&gt;, я не очень хорошо был знаком с &lt;code&gt;emacs-lisp&lt;/code&gt; и
уж тем более, различными библиотеками (я и по-прежнему не очень хорошо с этим
всем знаком). Очевидно, что можно ожидать от пакета &lt;code&gt;org&lt;/code&gt;, что там есть какая-то
функциональность, позволяющая получить список заголовков, которую можно было бы
использовать. Но нет ничего проще, чем в текстовом файле оставить все строчки,
начинающиеся со звёздочки. Зачем для этого нужен &lt;code&gt;org&lt;/code&gt;, славящийся своей
страстью к частой смене API? Вообщем-то, ни за чем. А значит, основную часть
пакета можно написать просто используя поиск по паре регулярных выражений. С
одной стороны -- это изобретение велосипеда, но с другой -- это сокращение
зависимостей.&lt;/p&gt;

&lt;p&gt;Впоследствии, мне несколько раз приходилось дописывать обработку содержания для
того, чтобы удалять некоторые вспомогательные элементы разметки, которые не
участвуют в построении ссылок (например, приоритеты и счётчики выполненных
задач), однако все эти случаи обрабатывались точно так же легко.&lt;/p&gt;

&lt;p&gt;Более того -- то, что я мог контролировать процесс всецело играло мне на руку в
том разрезе, что библиотека &lt;code&gt;org-ruby&lt;/code&gt;, которая используется &lt;code&gt;GitHub&#39;ом&lt;/code&gt; для
отрисовки разметки &lt;code&gt;org&lt;/code&gt; тоже является самописной. И я мог подстраивать
формирование содержания согласно тому, как это делает &lt;code&gt;org-ruby&lt;/code&gt;, который,
очевидно, реализует не все возможности &lt;code&gt;org&lt;/code&gt; (используй я &lt;code&gt;org&lt;/code&gt;, мне бы
пришлось это как-то обходить).&lt;/p&gt;

&lt;p&gt;Где я не мог обойтись без вызовов &lt;code&gt;org&lt;/code&gt;, так это при добавлении возможности
навигации по построенному содержанию. Если пользователь открывает файл в Emacs,
он может нажать &lt;code&gt;C-c C-o&lt;/code&gt;, стоя на имени заголовка в содержании, и курсор
прыгнет к самому заголовку. Я потратил тут порядком времени, чтобы разобраться
во внутренностях &lt;code&gt;org=&#39;a, но всё-таки добавил этот важнейший функционал. К
слову, для этого пришлось добавлять код, который работает по-разному для разных
версий =org&lt;/code&gt; (из-за упомянутой любви этого пакета к изменениям).&lt;/p&gt;

&lt;p&gt;Что касается качества кода -- во многом, это субъективный параметр. Вряд ли
кто-то будет спорить, что оператор &lt;code&gt;--&amp;gt;&lt;/code&gt; из библиотеки &lt;code&gt;dash&lt;/code&gt; -- это более
&#34;чистая&#34; альтернатива последовательным вызовам. Для сравнения:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;  (target (--&amp;gt; title
               (downcase it)
               (replace-regexp-in-string &amp;quot; &amp;quot; &amp;quot;-&amp;quot; it)
               (replace-regexp-in-string &amp;quot;[^[:alnum:]_-]&amp;quot; &amp;quot;&amp;quot; it)))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;  (let* ((spc-fix (replace-regexp-in-string &amp;quot; &amp;quot; &amp;quot;-&amp;quot; str))
         (upcase-fix (downcase spc-fix))
         (special-chars-fix (replace-regexp-in-string toc-org-special-chars-regexp &amp;quot;&amp;quot; upcase-fix t))))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Но НАСТОЛЬКО ли разница сильна? Чтобы уйти от субъективных споров, приведу один
объективный параметр.&lt;/p&gt;

&lt;p&gt;На момент написания заметки, &lt;code&gt;org-make-toc&lt;/code&gt; насчитывает 407 строк кода, а
=toc-org= -- 431. Казалось бы, сравнимо и даже чуть в пользу
=org-make-toc=. Однако, что пользователь получает за &#34;лишние&#34; 20 строк кода?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Возможность навигации по ссылкам со всеми актуальными версиями Org (killer&lt;/li&gt;
  feature!)
&lt;li&gt;Отсутствие баги, когда при закрытом содержании его текст всё равно появляется&lt;/li&gt;
  при сохранении (очень назойливое поведение, которое нужно специально лечить
  из-за того, как устроен &lt;code&gt;org&lt;/code&gt;)
&lt;li&gt;Правильная обработка &#34;одинаковых&#34; заголовков&lt;/li&gt;
&lt;li&gt;Обработка пользовательских статусов заголовков (отличных от &lt;code&gt;TODO&lt;/code&gt; и &lt;code&gt;DONE&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Обработка глобальных опций разметки, например, сохранять ли статусы заголовков&lt;/li&gt;
  (&lt;code&gt;#+OPTIONS: todo:t&lt;/code&gt;)
&lt;li&gt;Примитивное облагораживание внешнего вида содержания (=QUOTE=-блоки)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;На текущий момент &lt;code&gt;org-make-toc&lt;/code&gt; лишён этих важнейших фич и, честно говоря,
сомневаюсь, что их удастся добавить, уложившись в 20 строк. Т.е. для того, чтобы
повысить &#34;качество&#34; кода, &lt;code&gt;org-make-toc&lt;/code&gt; вносит три внешние зависимости, которые
тому, кто работает с кодом нужно дополнительно изучить и которые, на самом деле,
не сокращают, а увеличивают объём исходников. Кроме того, вместо выровненного
поведения с Github&#39;ом, код использует отвлечённые функции из &lt;code&gt;org&lt;/code&gt; (например,
для проверки, каким цветом подсвечено некоторое слово), фактически, используя
&#34;невидимую&#34; в тексте файла мета-информацию. Не знаю, конечно, но в моём словаре
эти признаки не имеют ничего общего с качеством кода.&lt;/p&gt;

&lt;p&gt;Ну и хотелось бы упомянуть среди прочего ещё и стабильность пакета. &lt;code&gt;toc-org=
имеет порядка 10-ти явных тестов на каждую поддерживаемую фичу, эти тесты
крутятся на Travis&#39;e и отрабатывают после каждого изменения. Т.е. сломать в нём
что-то довольно затруднительно. =org-make-toc&lt;/code&gt; имеет лишь номинальное количество
тестов, которые не проверяются автоматически.&lt;/p&gt;

&lt;p&gt;Подводя некоторый итог второй раз, можно заключить, что &lt;code&gt;org-make-toc&lt;/code&gt; ставит во
главу угла довольно странные ориентиры -- использование модных библиотек и
языковых конструкций, а также нишевый функционал по тонкому контролю за
содержанием содержания. При этом не уделяя должного (а где и вовсе никакого)
внимания действительно полезным аспектам. Не смотря на свою простоту и
&#34;велосипедообразность&#34;, &lt;code&gt;toc-org&lt;/code&gt;, на мой взгляд обладает всеми признаками
ладной программы:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Код компактный и читаемый, без ненужных зависимостей. Разобраться в нём легко&lt;/li&gt;
  даже любителю.
&lt;li&gt;Пакет хорошо протестирован и документирован, что у пользователей не возникает&lt;/li&gt;
  сложностей ни при установке, ни при использовании.
&lt;li&gt;Он решает реальную прикладную проблему пользователей и делает их жизнь проще,&lt;/li&gt;
  не требуя к себе лишнего внимания.
&lt;/ul&gt;

&lt;p&gt;В конце хотелось бы добавить ложку дёгтя в эту бочку самолюбования. Если
посчитать, сколько времени в общей сложности было потрачено на эти 400 строк и
посчитать стоимость этого проекта, исходя из рыночных зарплат программиста моей
квалификации -- думаю, что эти строки окажутся золотыми. Вряд ли, как кодовые
базы NASA, где каждая строчка стоит около двух тысяч долларов, но всё
же. Т.е. коммерческий успех этого проекта совершенно точно является крахом. С
другой стороны, если я помог ста тысячам пользователей сэкономить хотя бы по 10
минут каждому -- то это почти 2 года круглосуточной работы. Так что, с точки
зрения общего блага -- может быть всё не напрасно. И, может быть, именно так и
нужно разрабатывать программы и именно такими они и должны -- не в строчках
счастье?&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>Не мимолётное виденье</title>
      <link>http://snosov1.github.io/ru/post/not-fade-away/</link>
      <pubDate>Fri, 11 Jan 2019 15:18:56 +0300</pubDate>
      
      <guid>http://snosov1.github.io/ru/post/not-fade-away/</guid>
      
        <description>&lt;p&gt;Сняв сериал о семье Сопрано, Дэвид Чейз навсегда записался в выдающихся творцов
современности. Чего-то близкого по уровню во всём его творчестве нет и,
наверное, уже не будет. Однако, выдающиеся творцы хороши в первую очередь тем,
что им есть, что сказать про нашу действительность. Если сказанное не только
имеет глубокий смысл, но ещё и преподнесено в достойной форме -- оно становится
произведением искусства. Как, например, тот же сериал Сопрано, который,
используя бандитский антураж, на самом деле поднимает серьёзные проблемы и
раскрывает различные грани человеческих отношений.&lt;/p&gt;

&lt;p&gt;И если достойная форма -- это, в существенной степени, воля случая -- попадётся
творцу Джеймс Гандольфини с Тони Сирико или нет, доверит ли руководство
телеканала бюджет и т.п. -- то со смысловой частью у нормальных творцов, как
правило, всегда всё в порядке. Поэтому даже, казалось бы, второсортные вещи,
выходящие из-под пера, управляемого непустой головой, всё равно, как правило,
интересны теми мыслями, которые в них заложил автор.&lt;/p&gt;

&lt;p&gt;После Сопрано Дэвид Чейз, понятно, мог ничего уже больше не делать. В принципе,
он почти так и поступил, но всё-таки выпустил, как минимум, один фильм в 2012
году -- &#34;Not Fade Away&#34;. Как фильм он, мягко говоря, странный -- такое чувство,
что решили старые товарищи собраться и вспомнить былое. В начало навставляли
шуток про Джеймса Гандольфини с отсылками к Сопрано, какого-то внятного сюжета
там, можно сказать, нет -- на экране просто что-то происходит. Неудивительно, что
широкий зритель его не воспринял. Думаю, Чейз понимал, что снимает нечто
странное, но, видимо, ему хотелось как-то выпустить мысль, которую прямым
текстом озвучивает девочка в самом конце. Что, собственно, он и сделал этим
фильмом.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;Повторюсь, все два часа на экране происходит какая-то околесица. Не небылица -
всё вполне правдоподобно -- но именно подростковая околесица без каких-то
серьёзных событий. То герои собирают группу, то разбирают; что-то курят в
сортире; какие-то у них там проблемы -- то с родителями разругаются на ровном
месте, то между собой; половые у них там какие-то страсти -- кто с кем где когда
чего делал; подростковые мега-бизнес идеи и т.п.&lt;/p&gt;

&lt;p&gt;К чему происходят события и куда ведёт автор -- непонятно на протяжении всего
фильма. Вплоть до самого конца, когда танцующая девочка, ни с того, ни с сего
обращаясь к зрителю, прямым текстом выдаёт главную мысль. &#34;Америка&#34;, -- говорит
девочка, -- &#34;в 20 века совершила два сравнимых по взрывной силе открытия&#34;, -
говорит, -- &#34;ядерное оружие и рок-н-ролл. И ещё неизвестно&#34;, -- говорит, -- &#34;у чего
взрывная мощь сильнее.&#34;&lt;/p&gt;

&lt;p&gt;На этом фильм, собственно, и заканчивается, и все вопросы из разряда &#34;Что они
делают?&#34;, &#34;Зачем это?&#34;, &#34;К чему ведёт автор?&#34; остаются висеть в воздухе. И если
после просмотра ни над чем не задумываться, как это и бывает у большинства
зрителей -- то эти висящие вопросы, конечно же, хорошего впечатления после
просмотра не оставляют. Однако мысль, озвученная девочкой, действительно
интересная.&lt;/p&gt;

&lt;p&gt;Всё происходящее в фильме пугающе реалистично, несмотря на вопиющую
нелепость. Идиотская мотивация и поведение героев, идиотские представления о
том, как устроен мир и основанные на них идиотские, но вполне реальные, поступки
героев. В сухом остатке -- главный герой, абсолютно неумело, но целенаправленно,
пытался организовать музыкальную группу, вступал на этой почве в конфликты с
окружающими, чем-то жертвовал и рисковал, в итоге ничего не получилось и он
переехал в другой штат, чтобы учиться на кинодела.&lt;/p&gt;

&lt;p&gt;Разумная связь между его мотивацией, чаяниями, представлениями о том, как
устроена и какой должна быть жизнь, а также пониманием того, что нужно делать и
результатами, к которым это привело, отсутствует напрочь. Всё это в процессе
фильма и взросления героя непрерывно менялось и трансформировалось. Но несмотря
на отсутствие разумной связи, фактическая-то связь там есть. А факт, как
говорится -- самая упрямая в мире вещь. &#34;Когда б вы знали из какого сора растут
стихи, не ведая стыда&#34;, -- говорила другая наша авторша.&lt;/p&gt;

&lt;p&gt;И ведь, действительно, если вспомнить, какими мыслями ты руководствовался сам,
когда совершал какие-то поступки, будучи подростком и оценить эти мысли с высоты
прожитых лет, по-настоящему удивляешься -- как ты вообще умудрился прийти туда,
куда пришёл. И раз уж мы тут вспоминаем цитаты, приведу ещё один вольный
пересказ: &#34;Наверное, русское государство управляется непосредственно самим
господом Богом. Иначе невозможно объяснить, как оно вообще существует...&#34;&lt;/p&gt;

&lt;p&gt;Построив историю вокруг рок-н-ролла, Чейз, думаю, отчасти рассказывал
автобиографичную историю. Да и чего греха таить -- я сам, как и подавляющее
большинство знакомых мне людей, основало огромное количество своих поступков и
испытало их (хорошие или не очень) последствия на себе под тем или иным
&#34;влиянием&#34; рок-н-ролла. Можно пойти совсем далеко и, посмотрев концерт Монстры
Рока в Тушино за 1991 год, задаться таким отвлечённым вопросом -- а оказал ли
рок-н-ролл какое-то влияние на распад СССР?&lt;/p&gt;

&lt;p&gt;Безусловно, и тут автор прав, рок-н-ролл имеет невероятную силу воздействия на
массы -- при этом, как ни парадоксально, будучи почти что абстрактным
явлением. Какие-то весёлые песенки и танцевальные напевы -- а люди строят и
ломают жизни, всерьёз проникнувшись этим духом. Вопрос, с которым я оставлю
читателя напоследок -- почему этот дух так универсален и является ли он добрым?&lt;/p&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/P6RWnGQ3XqQ&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;</description>
      
    </item>
    
    <item>
      <title>Во все тяжкие</title>
      <link>http://snosov1.github.io/ru/post/breaking-bad/</link>
      <pubDate>Tue, 30 Oct 2018 11:46:31 +0300</pubDate>
      
      <guid>http://snosov1.github.io/ru/post/breaking-bad/</guid>
      
        <description>&lt;p&gt;Безусловно, сериал &#34;Во все тяжкие&#34; -- выдающееся произведение, не побоюсь
этого слова, искусства. Свежий, проработанный сценарий, операторская работа,
актёрская игра, которую, говорят, высоко оценил сам сэр Энтони Хопкинс.&lt;/p&gt;

&lt;p&gt;Если придираться, то можно разглядеть, как в первых сезонах на экране проступают
уши &lt;del&gt;фотографа&lt;/del&gt; режиссёра. Когда, например, герои начинают обсуждать между собой
варианты действий -- нередко это похоже, как будто сценарист или режиссёр заранее
отвечает зрителям, которые не применут указать на нестыковки и нелогичности
сюжета. Ближе к заключительным сезонам, на фоне возрастающего качества
технической стороны дела, повествование начинает закручиваться так, что уже даже
не знает, куда завернуться -- со всемогущими, почти мистическими персонажами и
сколь многочисленными, столь и бессмысленными убийствами детей.&lt;/p&gt;

&lt;p&gt;Но всё это мелочи и шероховатости, присущие любому предмету человеческого
труда. А о чём это произведение вцелом?  Понятно, что, как и любое хорошее
произведение -- обо всём на свете. О дружбе и предательстве, любви и семейной
жизни, о подлости и самоотверженности и т.д. Но всё-таки -- в чём главная мысль?
Что наркотики -- это плохо? Что хороший человек может легко превратиться в
злодея? Всё это куда-то не туда.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;Про наркотики там толком ничего нет, в отличие, например, от другого
замечательного фильма &#34;Реквием по мечте&#34;, где гораздо более живо показывается,
как эта дрянь медленно, но верно выжигает в героях людей. Безусловно, наркотики
в сериале варят и этот процесс является стержнем сюжета, вокруг которого,
собственно, и строится всё остальное. Но с некоторым натягом, если предположить,
что вместо наркотиков главные герои производили бы, например, оружие или
взрывчатые вещества -- драматургия в сценарии мало бы пострадала.&lt;/p&gt;

&lt;p&gt;Рассказывается ли нам о том, как приличный семьянин, связавшись не с тем, кем
надо, превращается в монстра? И да, и нет. Всё-таки &#34;связался&#34; он вполне
осознанно и по собственному желанию. Связался с человеком, который на тот момент
мало что из себя представлял. И вся их империя зла в итоге-то была сотворена
самим Волтером. Про него трудно сказать, что его засосала опасная
трясина. Выражаясь его словами, он сам и есть опасная трясина!&lt;/p&gt;

&lt;p&gt;При этом изначально (да и впоследствии) у Волтера Белого не было никакого
конкретного злого умысла. Не было такого, что лежит он и мечтает &#34;Вот бы
перетравить наркотой всю Америку!&#34; или &#34;Вот бы поубивать маленьких
детишек!&#34;. Грубо говоря, вся его мотивация сводилась к тому, что неплохо бы
заработать денег на том, что у него получается лучше всех, сметая все
преграды. А уж, собственно, злодеяния, совершавшиеся по ходу, были лишь побочным
эффектом. Он сначала ставил себя в некое положение, а потом разбирался по
ходу. Так а о чём же тогда этот сериал?&lt;/p&gt;

&lt;p&gt;Третьего дня я почти случайно пересмотрел последнюю серию и мне, не отягощённому
эмоциями и воспоминаниями от предшествующих серий, вдруг показалось, что я
понял, как это можно сформулировать.&lt;/p&gt;

&lt;p&gt;Когда Волтер пришёл прощаться со своей женой, будущие события (которые будут
развиваться уже за пределами сериала) выстроились для меня в довольно понятный
ряд. Сын Волтера будет жить &#34;обычной&#34; жизнью -- он отрёкся от отца и трудно
представить для него другие варианты развития событий. Его жена смирилась со
всем ужасом, через который они прошли и, безусловно, с большой раной на сердце,
но продолжит жить и воспитывать дочку. Ведь Волтер позаботился о том, чтобы с
неё сняли обвинения, плюс, в скором времени они получат отмытые деньги, купят
дом и переедут из той дыры, в которой они оказались. Всё вернётся на круги
своя. Ну а маленькая дочка и не переживала всех этих потрясений -- у неё жизнь
только начинается.&lt;/p&gt;

&lt;p&gt;На что эта картина похожа больше всего? На мой взгляд, на историю человечества,
где жизнь являет собой даже не столько череду, сколько переплетение сплошного
потока войн, убийств, завоеваний и обычной человеческой жизни, жизни простого
народа, если угодно.&lt;/p&gt;

&lt;p&gt;История Волтера является олицетворением некой войны или схожего потрясения в
миниатюре. Он взорвал окружающую действительность, как связка динамита,
брошенная в тихий омут. Кого-то накрыло волнами с головой, кого-то выбросило на
берег, кого-то разорвало на части. А после взрыва во́лны начали расходиться и всё
по-тихоньку стало возвращаться в равновесие.&lt;/p&gt;

&lt;p&gt;Безусловно, это не простой вопрос, но, похоже, в нашей жизни не обойтись без
таких людей и таких потрясений. Авторы же сериала показали нам неплохую
анатомию -- как оно происходит в деталях.&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>Про доступность информации</title>
      <link>http://snosov1.github.io/ru/post/available-knowledge/</link>
      <pubDate>Thu, 20 Sep 2018 13:06:46 +0300</pubDate>
      
      <guid>http://snosov1.github.io/ru/post/available-knowledge/</guid>
      
        <description>&lt;blockquote&gt;
  &lt;p&gt;Плюнь тому в глаза, кто скажет, что можно обнять необъятное!&lt;/p&gt;
  &lt;footer&gt;
    &lt;strong&gt;Козьма Прутков&lt;/strong&gt;
    
      
        
      
    
  &lt;/footer&gt;
&lt;/blockquote&gt;


&lt;p&gt;В достаточно осознанном уже возрасте я впервые поглядел фильм &#34;Москва слезам не
верит&#34;. При просмотре, откровенно говоря, испытал некий шок -- до чего ладно
сделано. Персонажи, сценарий -- всё, как живое. Со временем из памяти вымылись
детали, но одна-таки засела в голове. Когда главная героиня съезжала из общаги
на квартиру -- вещи она тащила на себе. И в одной руке у неё был чемодан со
шмотками, а в другой -- не меньших размеров вязанка книг и учебников.&lt;/p&gt;


&lt;link rel=&#34;stylesheet&#34; href=&#34;http://snosov1.github.io/css/hugo-easy-gallery.css&#34; /&gt;
&lt;div class=&#34;box&#34; &gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;http://snosov1.github.io/static/moscow-does-not-believe.jpg&#34; /&gt;
    &lt;/div&gt;
    &lt;a href=&#34;http://snosov1.github.io/static/moscow-does-not-believe.jpg&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
  &lt;/figure&gt;
&lt;/div&gt;


&lt;p&gt;&lt;/p&gt;

&lt;p&gt;Короткометражка &#34;Наваждение&#34; из фильма о приключениях Шурика целиком построена на
том и вокруг того, как студенты ищут методички, лекции и учебники, по которым
можно подготовиться к экзаменам. Собственно, то, что Шурик зачитался конспектом
Лиды на улице -- и есть главная причина, по которой он оказался у неё дома в
первый раз.&lt;/p&gt;



&lt;div class=&#34;box&#34; &gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;http://snosov1.github.io/static/shurik.jpeg&#34; /&gt;
    &lt;/div&gt;
    &lt;a href=&#34;http://snosov1.github.io/static/shurik.jpeg&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
  &lt;/figure&gt;
&lt;/div&gt;


&lt;p&gt;Уже во времена моей юности раздобыть, перенести или размножить учебные материалы
было проще простого -- скачал книгу из интернета, записал на флешку, отфоткал
конспект. Искать литературу тоже стало до безобразия просто -- набрал в поиске и
в считанные минуты находится практически всё, что угодно. В университете, где я
учился, по инерции жила &#34;бумажная библиотека&#34;, где книги можно было брать
напрокат. Но мне уже тогда было искренне непонятно -- зачем хоть кто-то захочет
туда идти, получать удостоверение читателя, просить тётеньку-библиотекаря что-то
выдать под страшной угрозой платить пени за несвоевременный возврат или (не дай
Бог) утерю макулатуры.&lt;/p&gt;

&lt;p&gt;С наступлением этих времён два, казалось бы, и так очевидных факта выступили
наиболее выпукло. &lt;strong&gt;Во-первых&lt;/strong&gt;, время изучения некой области не сильно зависит от
способов хранения и доставки дидактических материалов. Когда старший брат
впервые принёс мне на флешке три тома &#34;Искусства программирования&#34; за авторством
Дональда Кнута, весь процесс занял порядка 10 минут: за 5 минут он скачал его на
работе и ещё за 5 минут я его скопировал с флешки. А последующее изучение заняло
у меня порядка двух лет -- и то более или менее подробно я изучил и проработал
лишь первый том, остальные прочитал постольку-поскольку. Нетрудно предположить,
что ничего бы сильно не изменилось, если бы вместо десяти минут я потратил 2 дня
или даже неделю на поиски этих книг.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Второй&lt;/strong&gt; проступивший факт заключается в том, что создавать стоящий материал
могут, мягко говоря, не все. Хороших книг, а также других произведений науки,
культуры и искусства, не так уж много. И выходят они лишь у небольшого
количества людей, которым действительно есть что сказать. При этом форма, опять
же, в большинстве случаев играет довольно второстепенную роль.&lt;/p&gt;

&lt;p&gt;Например, я не знаю, есть ли где-то место гаже, чем вкладка Trending Ютуба. Все
материалы там являют собой средоточие тупости, пошлости и вторичности. 99%
содержимого там -- это какие-то отмороженные клипы в стиле &#34;крутятся жопы&#34;,
новости и сплетни про &#34;знаменитостей&#34; (см. комики, певцы, плясуны, малолетние
клоуны, дети богатых родителей и прочая шушера), а также &#34;мнения&#34; об этом от
кого попало.&lt;/p&gt;

&lt;p&gt;Вся эта дрянь нередко снята на приличном техническом уровне -- в
спец. помещениях, дорогущими камерами, с дорогущим звуком. И, конечно же, с
дешёвыми приёмами, играющими на низменных человеческих инстинктах. Почему она,
собственно, и торчит в этих трендах, набирая просмотры. Однако, при всём при
этом, ничего позитивного ни в чью жизнь она привнести не может. Ничего. Ноль.&lt;/p&gt;

&lt;p&gt;Тем не менее, нет худа без добра -- желающие теперь, действительно, имеют прямой
доступ к необъятному объёму информации. И могут освоить огромное количество
навыков и профессий, грубо говоря, не выходя из дома и практически даром. На том
же Ютубе, к примеру, есть большое количество каналов, где специалисты своего
дела выкладывают невзрачные видео, снятые при помощи подручных средств,
наполненные высококачественным содержимым, по которому можно было бы писать
учебники для ВУЗов. И если раньше была сложность найти оазис знаний в
бескрайней пустыне, теперь сложность -- найти жемчужины здравого смысла в океане
бессмысленной мути.&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>Задачи для начинающих</title>
      <link>http://snosov1.github.io/ru/post/problems-for-beginners/</link>
      <pubDate>Tue, 18 Sep 2018 15:34:13 +0300</pubDate>
      
      <guid>http://snosov1.github.io/ru/post/problems-for-beginners/</guid>
      
        <description>&lt;p&gt;Для решения нижеприведённых задач нужно только знание базовых геометрических
формул (площадь треугольника, круга, длина окружности) и оператора вывода:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Вывести длину окружности с заданным радиусом и площадь круга&lt;/li&gt;
&lt;li&gt;Вывести площадь трапеции с заданными длинами оснований и высотой&lt;/li&gt;
&lt;li&gt;Вывести расстояние между центрами двух заданных на числовой прямой отрезков&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Задачи с вводом данных и условным оператором:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Упорядочить три числа&lt;/li&gt;
&lt;li&gt;Написать калькулятор для двух чисел (нельзя делить на ноль)&lt;/li&gt;
&lt;li&gt;Вывести с какой стороны одномерного отрезка находится точка&lt;/li&gt;
&lt;li&gt;Вывести в каком квадранте находится двухмерная точка&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Задачи, для которых требуется теорема Пифагора (изучают в 7ом классе):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Вывести расстояние между двумя заданными точками на плоскости&lt;/li&gt;
&lt;li&gt;Вывести пересекаются ли две окружности с заданными центрами и радиусами&lt;/li&gt;
&lt;li&gt;Найти площадь равнобедренного треугольника по заданному основанию и боковой стороне&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Задачи, для которых требуется цикл&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Вывести последовательность 0, 1, -1, 2, -2, 3, -3, ...&lt;/li&gt;
&lt;li&gt;Вывести числа по &#34;двумерной спирали&#34;: (0, 0), (0, 1), (1, 1), (1, -1), (-1, -1), ...&lt;/li&gt;
&lt;li&gt;Вывести индексы на главной и побочной диагонали квадрата&lt;/li&gt;
&lt;/ul&gt;
</description>
      
    </item>
    
    <item>
      <title>Об инновационных школах</title>
      <link>http://snosov1.github.io/ru/post/letovo/</link>
      <pubDate>Thu, 06 Sep 2018 15:34:13 +0300</pubDate>
      
      <guid>http://snosov1.github.io/ru/post/letovo/</guid>
      
        <description>&lt;p&gt;Третьего дня перевернул календарь, а там третье сентября -- стало быть, день
знаний, ибо первое в этом году выпало на субботу. По случаю, недавно же узнал,
что у нас в стране, точнее, в Москве, жизнь кипит довольно бурно, и там
открылась, например, школа &#34;Летово&#34;. Судя по заявленной программе и другим
косвенным признакам -- вполне себе добротная школа с толковым педсоставом и
отличной инфраструктурой.&lt;/p&gt;

&lt;p&gt;На удивление, всё говорят и постулируют по делу, и, как нарочно, в полную
противоположность тому, что мы слышим из министерств, связанных с
образованием. Оказывается (оказывается) школа не только должна давать знания, но
и заниматься воспитанием и всесторонним развитием детей. Оказывается, учитель и
ученик должны состоять в близких и доверительных отношениях; при этом учитель,
несомненно, должен выступать в роли старшего товарища, который в любой ситуации
подскажет и наставит. Оказывается, оценки в школе нужны и важны, и при этом, они
ну никак не сводятся к заполнению тестов -- нужно отдельно оценивать целый
комплекс критериев -- знание и понимание предмета, умение анализировать тексты и
решать задачи, умение тексты создавать и применять полученные навыки на
практике. Оказывается, хорошее образование должно быть доступно всем гражданам,
вне зависимости от дохода их родителей.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;Прежде чем делать выводы об успешности школы, ей, конечно, нужно проработать
хотя бы пару десятков лет и я всячески желаю её коллективу успехов. Но мне
хотелось бы обратить внимание вот на какой разрез. По информации на сайте -
себестоимость обучения одного ученика в школе &#34;Летово&#34; составляет 110 т.р. в
месяц. Эта сумма включает чисто образовательные услуги, без проживания, питания
и т.п. Возьмём средний класс в 20 учеников и учебную неделю в 36 рабочих часов
(грубо говоря, это две полные ставки учителя). Себестоимость обучения такого
класса -- 2.2 млн. рублей в месяц. Уверен, в Новой Москве, хорошие зарплаты и два
условных учителя со ставкой 18 часов, получают, например, по 200 т.р. в месяц -
остаётся 1.8 млн. За 100 тысяч в месяц, думаю, вполне можно содержать помещения
класса в чистоте (если мы не хотим назначать дежурных из числа творческих детей
в классе). 500 тысяч, видимо пойдёт на зарплату руководителям кружков и
спортивных секций, методистам и медперсоналу, и ещё за усреднённые 200 тысяч в
месяц с запасом можно проводить текущий ремонт и обновление оборудования в
классе.&lt;/p&gt;

&lt;p&gt;Остаётся один миллион с одного учебного класса, который (раз школа
некоммерческая) видимо идёт на зарплату управляющего коллектива -- директора,
завучей. При таких зарплатах за управляющий коллектив можно лишь порадоваться. И
я уверен, что это выдающиеся люди, открывшие выдающуюся школу. Вот только есть
наблюдение -- учили их, скорее всего, в обычной советской школе -- на деревянном
стуле, за деревянной партой, при помощи двух инструментов -- белого мела и чёрной
доски. Себестоимость такого обучения в месяц была не сильно выше ведра того
самого мела, ведра молока и дюжины буханок хлеба. И выучили ведь этих выдающихся
людей. И не только их -- выучили Алфёрова, Келдыша и многих других.&lt;/p&gt;

&lt;p&gt;Хорошо, что появляются такие школы для талантливых детей, с талантливым,
достойно оплачиваемым коллективом. Но в ней учатся сотни людей. А что делать с
миллионами учеников по всей стране? Ведь к каждой школе по фонду в 7 млрд. не
приставишь. Да и в миллиардах ли дело, если вся учеба в итоге происходит в
голове школьника, а не в айпаде. И, в первую очередь, за счёт его собственной
работы и стараний. Тем более что в прошлом веке было наглядно показано -- выйти в
космос вполне могут простые ребята, стоявшие в своё время у черных досок
измазанные мелом -- была бы общая цель и светлая мечта.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://mel.fm/novosti/7693185-letovo&#34; title=&#34;Открытие школы &amp;quot;Летово&amp;quot;&#34;&gt;Открытие школы &#34;Летово&#34;&lt;/a&gt;&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>О себе</title>
      <link>http://snosov1.github.io/ru/about/</link>
      <pubDate>Sun, 20 Aug 2017 21:38:52 +0800</pubDate>
      
      <guid>http://snosov1.github.io/ru/about/</guid>
      
        <description>&lt;p&gt;Меня зовут Сергей Носов. Я -- бывалый программист из России. Занимаюсь
программированием и смежными дисциплинами сколько себя помню. Большую часть
профессионального опыта составляют нативные языки программирования (главным
образом, С++); оптимизация под Интеловские процессоры и Нвидиевские карты;
Компьютерное Зрение и разделы математики, которые обычно объединяют
словосочетанием &#34;Computer Science&#34;.&lt;/p&gt;

&lt;p&gt;Являюсь ярым пользователем и приверженцем редактора &lt;a href=&#34;https://www.gnu.org/software/emacs/&#34; title=&#34;Emacs&#34;&gt;Emacs&lt;/a&gt; и, как следствие,
автором расширяемого, настраиваемого и самодокументированного &lt;a href=&#34;https://github.com/snosov1/dot-emacs&#34; title=&#34;конфигурационного
файла&#34;&gt;конфигурационного
файла&lt;/a&gt; для него, где в дополнение имеется &lt;a href=&#34;https://github.com/snosov1/dot-emacs/blob/master/tutorial&#34; title=&#34;методичка&#34;&gt;методичка&lt;/a&gt; для начинающих. По случаю,
также являюсь автором популярного пакета &lt;a href=&#34;https://melpa.org/#/toc-org&#34; title=&#34;toc-org&#34;&gt;toc-org&lt;/a&gt; для автоматической генерации
содержания (и автором не очень популярного пакета &lt;a href=&#34;https://melpa.org/#/dummyparens&#34; title=&#34;dummyparens&#34;&gt;dummyparens&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Список публичных проектов, в которых я, так или иначе участвовал, выглядит
следующим образом:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://software.intel.com/en-us/openvino-toolkit&#34; title=&#34;OpenVINO&#34;&gt;OpenVINO&lt;/a&gt; Model Zoo. Наша команда натренировала примерно треть моделей под грифом &#34;intel_models&#34;&lt;/li&gt;
&lt;li&gt;Обучающие &lt;a href=&#34;https://github.com/snosov1/jetson-screencasts-sources&#34; title=&#34;скринкасты&#34;&gt;скринкасты&lt;/a&gt; по OpenCV на Jetson&#39;е&lt;/li&gt;
&lt;li&gt;OpenCV&#39;шная &lt;a href=&#34;https://github.com/opencv/opencv/blob/master/modules/imgproc/src/clahe.cpp&#34; title=&#34;реализация CLAHE&#34;&gt;реализация CLAHE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Intel-Media-SDK/MediaSDK/tree/master/samples&#34; title=&#34;Сэмплы в Media SDK&#34;&gt;Сэмплы в Media SDK&lt;/a&gt; (участвовал в разработке ещё до того, как Media SDK вышла в Open Source)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://bitbucket.org/digitalsphere/sphericalmirror/src/master/&#34; title=&#34;Плагин для VLC&#34;&gt;Плагин для VLC&lt;/a&gt;, реализующий преобразование &#34;Сферическое Зеркало&#34;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.dropbox.com/s/yq7p4de99knn1o0/pre-defense.pdf?dl=0&#34; title=&#34;Магистерская диссертация&#34;&gt;Магистерская диссертация&lt;/a&gt; из Нижегородского Университета им. Лобачевского &#34;Об объёме максимального параллелепипеда, вложенного в симплекс&#34;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;С 2015 года я веду еженедельный субботний кружок по спортивному программированию
в Лицее 165 г. Нижний Новгород. Также, веду ежегодную лекцию об &#34;&lt;a href=&#34;https://github.com/UNN-VMK-Software/devtools-course-theory/tree/master/slides/09-automation&#34; title=&#34;Автоматизации в
программировании&#34;&gt;Автоматизации в
программировании&lt;/a&gt;&#34; в рамках курса &#34;Инструменты Разработки&#34; в ННГУ.&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>Ключ на старт</title>
      <link>http://snosov1.github.io/ru/post/init/</link>
      <pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate>
      
      <guid>http://snosov1.github.io/ru/post/init/</guid>
      
        <description>










  
  
  
  





  


&lt;blockquote&gt;
  &lt;p&gt;Давным-давно кроме черноты вообще ничего не было. Так что, по-моему, свет
начинает побеждать.&lt;/p&gt;
  &lt;footer&gt;
    &lt;strong&gt;Раст, Настоящий детектив&lt;/strong&gt;
    
      
        
      
    
  &lt;/footer&gt;
&lt;/blockquote&gt;

</description>
      
    </item>
    
  </channel>
</rss>